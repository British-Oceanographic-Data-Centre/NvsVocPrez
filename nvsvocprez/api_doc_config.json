{
	"api_details":{
	"description" : "The NVS technical and content governance is coordinated by a small team of data and semantic technology specialists at the National Oceanography Centre - British Oceanographic Data Centre (BODC).. ",
	"title":"The NERC Vocabulary Server (NVS)",
	"version":"0.0.1",
	"contact":{
		"name": "Alexandra Kokkinaki",
		"url": "https://www.vocabnerc.ac.uk",
		"email": "vocab.services@bodc.ac.uk"
	},
	"license_info":{
		"name": "CC BY 4.0",
		"url": "https://creativecommons.org/licenses/by/4.0/legalcode"
	},
	"docs_url":"/documentation"
    },
	"tags":[
		{
			"name": "Collections",
			"description": "SKOS concept collections held in the NERC Vocabulary Server.",
			"externalDocs": {
				"description": "Find out more",
				"url": "http://vocab.nerc.ac.uk/collection/"
			}
			
		},
		{
			"name": "Schemas",
			"description": "SKOS concept schemes managed by the NERC Vocabulary Server.",
			"externalDocs": {
				"description": "Find out more",
				"url": "http://vocab.nerc.ac.uk/scheme/"
			}
			
		},
		{
			"name": "Mappings",
			"description": "Retrieves collections for a mapping.",
			"externalDocs": {
				"description": "Find out more",
				"url": "http://vocab.nerc.ac.uk/search_nvs/"
			}
		},
		{
			"name": "SPARQL",
			"description": "Endpoints for interacting with Sparql",
			"externalDocs": {
				"description": "Find out more",
				"url": "http://vocab.nerc.ac.uk/sparql/"
			}		
		},
		{
			"name": "Standard",
			"description": "#AK",
			"externalDocs": {
				"description": "#AK",
				"url": "http://vocab.nerc.ac.uk"
			}		
		}
	],
	"paths":{
		"/": {
			"get" : {
				"summary": "Landing page for NVS",
				"description": "This is the Landing page for NVS"
			}
		},
		"/collection/": {
			"get" : {
				"tags":["Collections"],
				"summary": "Retrieve all collections",
				"description": "This endpoint will return all the collections showing their ID, Title, Version, Version Date, Description, Governance and an External Link.",
				"openapi_extra":{
				"parameters": [
					{
						"in": "query",
						"name": "_mediatype",
						"description": "Select the media type to view the collections page.",
						"required": false,
						"schema": {
							"type": "string",
							"enum": ["text/turtle", "application/ld+json", "application/rdf+xml"]
						  },
						"example" : "text/turtle"	
					},
					{
						"in": "query",
						"name": "_profile",
						"description": "Select the profile to use when making the request.",
						"schema": {
						  "type": "string",
						  "enum": ["void", "nvs", "skos", "dd", "vocpub", "dcat", "sdo"]
						},
						"required": false,
						"example": "nvs"
					  }
			  ]
			}
		}
		},
		"/collection/{collection_id}/current/": {
			"get" : {
				"tags":["Collections"],
				"summary": "Retrieve based on a collection id",
				"description": "Retrieve details of a particular collection",
				"openapi_extra":{
				"parameters": [
				  {
				"in": "path",
				"name": "collection_id",
				"description": "The collection ID for the desired collection.",
				"required": true,
				"example": "C30"
				},  {
					"in": "query",
					"name": "_profile",
					"description": "Select the profile to use when making the request.",
					"schema": {
					  "type": "string",
					  "enum": ["void", "nvs", "skos", "dd", "vocpub", "dcat", "sdo"]
					},
					"required": false,
					"example": "nvs"
				  },
				  {
						"in": "query",
						"name": "_mediatype",
						"description": "Select the media type for the collection that is being retrieved.",
						"required": false,
						"schema": {
							"type": "string",
							"enum": ["text/turtle", "application/ld+json", "application/rdf+xml"]
						  },
						"example" : "text/turtle"	
					}
					
			]
				}
				
			}
		},
		"/collection/{collection_id}/current/{acc_dep_or_concept}/": {
			"get" : {
				"tags":["Collections"],
				"summary": "Retrieve based on a collection ID and status",
				"description": "Retrieve details of a particular collection",
				"openapi_extra":{
					"parameters": [
					{
					"in": "path",
					"name": "collection_id",
					"description": "The collection ID for the desired collection.",
					"required": "True",
					"example": "C30"
					},
				    {
					"in": "path",
					"name": "acc_dep_or_concept",
					"description": "Status of the desired collection.",
					"required": "False",
					"schema": {
						"title": "Collection id Status",
						"type": "status of the collection id",
						"enum": ["accepted", "deprecated", "all", "None"]
					  },
					"example" :"accepted"
					},
					{
						"in": "query",
						"name": "_mediatype",
						"description": "Select the media type for the collection that is being retrieved.",
						"required": false,
						"schema": {
							"type": "string",
							"enum": ["text/turtle", "application/ld+json", "application/rdf+xml"]
						  },
						"example" : "text/turtle"	
					},
					{
						"in": "query",
						"name": "_profile",
						"description": "Select the profile to use when making the request.",
						"schema": {
						  "type": "string",
						  "enum": ["void", "nvs", "skos", "dd", "vocpub", "dcat", "sdo"]
						},
						"required": false,
						"example": "nvs"
					  }
					]
				}
			}
		},
		"/collection/{collection_id}/current/{concept_id}/{vnum}/": {
			"get" : {
				"tags":["Collections"],
				"summary": "Retrieve based on Collection & Concept ID, and version number.",
				"description": "Retrieve details of a particular collection, with the added functionality of choosing a concept ID and a version number.",
				"openapi_extra":{
					"parameters": [
					{
					"in": "path",
					"name": "collection_id",
					"description": "Insert the collection ID here. For a full list of collection ID's, use the /collection/ endpoint.",
					"required": true
					},
				    {
					"in": "path",
					"name": "concept_id",
					"description": "Insert the Concept ID here. For a full list of concepts, view a vocabulary and then refer to the ID column. When viewing the concept, the available versions will also be visible.",
					"required": true
					},
					{
					"in": "path",
					"name": "vnum",
					"description": "Insert the desired version number for the concept.",
					"required": false,
					"example" : "1"
					},
					{
						"in": "query",
						"name": "_profile",
						"description": "Select the profile to use when making the request.",
						"schema": {
						  "type": "string",
						  "enum": ["void", "nvs", "skos", "dd", "vocpub", "dcat", "sdo"]
						},
						"required": false,
						"example": "nvs"
					  },
					  {
							"in": "query",
							"name": "_mediatype",
							"description": "Select the media type for the collection that is being retrieved.",
							"required": false,
							"schema": {
								"type": "string",
								"enum": ["text/turtle", "application/ld+json", "application/rdf+xml"]
							  },
							"example" : "text/turtle"	
						}
					]
				}
			}
		},
		"/scheme/": {
			"get" : {
				"tags":["Schemas"],
				"summary": "Retrieve all schemes",
				"description": "This endpoint will return all the schemes showing their ID, Title, Version, Version Date, Description, Governance and an External Link.",
				"openapi_extra":{
				"parameters": [
					{
						"in": "query",
						"name": "_mediatype",
						"description": "Select the media type to view the schemes page.",
						"required": false,
						"schema": {
							"type": "string",
							"enum": ["text/turtle", "application/ld+json", "application/rdf+xml"]
						  },
						"example" : "text/turtle"	
					},
					{
						"in": "query",
						"name": "_profile",
						"description": "Select the profile to use when making the request.",
						"schema": {
						  "type": "string",
						  "enum": ["void", "nvs", "skos", "dd", "vocpub", "dcat", "sdo"]
						},
						"required": false,
						"example": "nvs"
					  }
			  ]
			}
		}
		},
		"/scheme/{scheme_id}/current/": {
			"get" : {
				"tags":["Schemas"],
				"summary": "Retrieve based on a scheme ID",
				"description": "A concept scheme is an aggregation of one or more SKOS concepts. Semantic links between these concepts can also be viewed as part of the concept scheme.",
				"openapi_extra":{
				"parameters": [
				  {
				"in": "path",
				"name": "scheme_id",
				"description": "Pass in the scheme ID here. A full list can be viewed at the /scheme/ endpoint.",
				"required": true
				},
				{
					"in": "query",
					"name": "_mediatype",
					"description": "Select the media type to view the schemes page.",
					"required": false,
					"schema": {
						"type": "string",
						"enum": ["text/turtle", "application/ld+json", "application/rdf+xml"]
					  },
					"example" : "text/turtle"	
				},
				{
					"in": "query",
					"name": "_profile",
					"description": "Select the profile to use when making the request.",
					"schema": {
					  "type": "string",
					  "enum": ["void", "nvs", "skos", "dd", "vocpub", "dcat", "sdo"]
					},
					"required": false,
					"example": "nvs"
				  }
				
			]
				}
			}
		},
		"/scheme/{scheme_id}/current/{acc_dep}/": {
			"get" : {
				"tags":["Schemas"],
				"summary": "Retrieve a scheme based on scheme id and its apprecated/deprecated status",
				"description": "This endpoint is the same as the /scheme{scheme_id}/ endpoint, but gives the option to pass in an additional status. ",
				"openapi_extra":{
					"parameters": [
					{
					"in": "path",
					"name": "scheme_id",
					"description": "This is the ID for the desired scheme",
					"required": true
					},
				    {
					"in": "path",
					"name": "acc_dep",
					"description": "Given a scheme_id, this parameter allows for a status of the scheme to also be passed in.",
					"required": false,
					"schema": {
						"title": "acc_dep",
						"type": "status of the desired collection.",
						"enum": ["accepted", "deprecated", "all", "None"]
					  },
					"example" :"accepted"
					},
					{
						"in": "query",
						"name": "_mediatype",
						"description": "Select the media type to view the schemes page.",
						"required": false,
						"schema": {
							"type": "string",
							"enum": ["text/turtle", "application/ld+json", "application/rdf+xml"]
						  },
						"example" : "text/turtle"	
					},
					{
						"in": "query",
						"name": "_profile",
						"description": "Select the profile to use when making the request.",
						"schema": {
						  "type": "string",
						  "enum": ["void", "nvs", "skos", "dd", "vocpub", "dcat", "sdo"]
						},
						"required": false,
						"example": "nvs"
					  }
					]
				}
			}
		},
			"/mapping/{int_ext}/{mapping_id}/": {
				"get" : {
					"tags":["Mappings"],
					"summary": "Retrieve a mapping",
					"description": "Retrieves a mapping for a collection. #AK",
					"openapi_extra":{
					"parameters": [
					  {
					"in": "path",
					"name": "int_ext",
					"description": "#AK",
					"schema": {
						"type": "string",
						"enum": ["I", "E"]
					  },
					  "required": true,
					  "example": "I"
					},
					{
					"in": "path",
					"name": "mapping_id",
					"description": "#AK",
					"required": true,
					"example" : "24"
					},
					{
						"in": "query",
						"name": "_mediatype",
						"description": "Select the media type to view the schemes page.",
						"required": false,
						"schema": {
							"type": "string",
							"enum": ["text/turtle", "application/ld+json", "application/rdf+xml"]
						  },
						"example" : "text/turtle"	
					},
					{
						"in": "query",
						"name": "_profile",
						"description": "Select the profile to use when making the request.",
						"schema": {
						  "type": "string",
						  "enum": ["void", "nvs", "skos", "dd", "vocpub", "dcat", "sdo"]
						},
						"required": false,
						"example": "nvs"
					  }
				]
					}
				}
		},
			"/about/": {
				"get" : {
					"summary": "About page",
					"description": "Use this endpoint to view licencing and contact information"
				}
	
		},
			"/contact/": {
				"get" : {
					"summary": "Contact Page",
					"description": "Use this endpoint to retrieve the E-mail, phone number and address for BODC."
				}

		}, 
		"/sparql/" : {
			"post": {
				"tags": ["SPARQL"],
				"summary": "Post a SPARQL query",
				"description": "Retrieve results based on a SPARQL Query. \n\nAn example query may be: 'SELECT * WHERE { ?sub ?pred ?obj . } LIMIT 10'",
				"openapi_extra":{
					"produces": [
						"text/html",
						"application/json"
					  ],
					  
					"responses": {
						"200": {
							"body": {
									"application/json":{
										"schema":{"type": "string"}
										},
										"text/html":{
										"schema":{"type": "string"}
										}
		
									}
								}
					
						}	
					}

			},"get" : {
				"tags":["SPARQL"],
				"summary": "Get a SPARQL query",
				"description": "#JC",
				"openapi_extra":{
					"parameters": [

					  {
					"in": "query",
					"name": "query",
					"description": "HTML encoded sparql query",
					"required": "True",
					"example": "SELECT * WHERE {?sub ?pred ?obj .} LIMIT 10"
					},

					{
						"in": "header",
						"name": "custom_accept",
						"description": "The format of the header of the query",
						"required": "True",
						"schema": {

							"enum": ["text/html", "text/turtle", "application/rdf+xml", "application/ld+json","application/n-triples", "application/sparql-results+json", "text/csv", "text/tab-separated-values"]
						  },

						"example": "application/rdf+xml"
					}
				],

					"responseBody":{
						"content":{
							"application/json":{
								"schema":
									{"type": "string"}
							}
						}
					}
					}
			}
		},
			"/standard_name/{acc_dep_or_concept}/": {
				"get" : {
					"tags":["Standard"],
					"summary": "#AK",
					"description": "#AK",
					"openapi_extra":{
					"parameters": [
						{
						"in": "path",
						"name": "acc_dep_or_concept",
						"description": "#AK",
						"required": false
						}]
					}
				}
	
			}
				
		}
	}


