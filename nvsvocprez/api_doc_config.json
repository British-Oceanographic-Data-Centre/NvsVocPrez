{
	"api_details": {
	  "description": "The NVS technical and content governance is coordinated by a small team of data and semantic technology specialists at the National Oceanography Centre - British Oceanographic Data Centre (BODC).. ",
	  "title": "The NERC Vocabulary Server (NVS)",
	  "version": "0.0.1",
	  "contact": {
		"name": "Vocab Services",
		"url": "http://vocab.nerc.ac.uk",
		"email": "vocab.services@bodc.ac.uk"
	  },
	  "license_info": {
		"name": "CC BY 4.0",
		"url": "https://creativecommons.org/licenses/by/4.0/legalcode"
	  },
	  "docs_url": "/docs"
	},
	"tags": [
	  {
		"name": "Collections",
		"description": "SKOS concept collections held in the NERC Vocabulary Server.",
		"externalDocs": {
		  "description": "Find out more",
		  "url": "http://vocab.nerc.ac.uk/collection/"
		}
	  },
	  {
		"name": "Schemes",
		"description": "SKOS concept schemes managed by the NERC Vocabulary Server.",
		"externalDocs": {
		  "description": "Find out more",
		  "url": "http://vocab.nerc.ac.uk/scheme/"
		}
	  },
	  {
		"name": "Mappings",
		"description": "Retrieves a mapping for a concept.",
		"externalDocs": {
		  "description": "Find out more",
		  "url": "http://vocab.nerc.ac.uk/search_nvs/"
		}
	  },
	  {
		"name": "SPARQL",
		"description": "NVS Sparql Endpoint",
		"externalDocs": {
		  "description": "Find out more",
		  "url": "http://vocab.nerc.ac.uk/sparql/"
		}
	  },
	  {
		"name": "Standard Names",
		"description": "Climate and Forecast Standard Names",
		"externalDocs": {
		  "description": "Find out more",
		  "url": "http://vocab.nerc.ac.uk/standard_name/"
		}
	  }
	],
	"paths": {
	  "/": {
		"get": {
		  "summary": "Landing page for NVS",
		  "description": "This is the Landing page for NVS"
		}
	  },
	  "/collection/": {
		"get": {
		  "tags": [
			"Collections"
		  ],
		  "summary": "Retrieve all collections",
		  "description": "This endpoint will return all the collections showing their ID, Title, Version, Version Date, Description, Governance and an External Link.",
		  "openapi_extra": {
			"parameters": [
			  {
				"in": "query",
				"name": "_mediatype",
				"description": "Select the media type to view the collections page.",
				"required": false,
				"schema": {
				  "type": "string",
				  "enum": [
					"text/turtle",
					"application/ld+json",
					"application/rdf+xml"
				  ]
				},
				"example": "text/turtle"
			  },
			  {
				"in": "query",
				"name": "_profile",
				"description": "Select the profile to use when making the request.",
				"schema": {
				  "type": "string",
				  "enum": [
					"void",
					"nvs",
					"skos",
					"dd",
					"vocpub",
					"dcat",
					"sdo"
				  ]
				},
				"required": false,
				"example": "nvs"
			  }
			]
		  }
		}
	  },
	  "/collection/{collection_id}/current/": {
		"get": {
		  "tags": [
			"Collections"
		  ],
		  "summary": "Retrieve based on a collection ID",
		  "description": "Retrieve details of a particular collection",
		  "openapi_extra": {
			"parameters": [
			  {
				"in": "path",
				"name": "collection_id",
				"description": "The collection ID for the desired collection.",
				"required": true,
				"example": "C30"
			  },
			  {
				"in": "query",
				"name": "_profile",
				"description": "Select the profile to use when making the request.",
				"schema": {
				  "type": "string",
				  "enum": [
					"void",
					"nvs",
					"skos",
					"dd",
					"vocpub",
					"dcat",
					"sdo"
				  ]
				},
				"required": false,
				"example": "nvs"
			  },
			  {
				"in": "query",
				"name": "_mediatype",
				"description": "Select the media type for the collection that is being retrieved.",
				"required": false,
				"schema": {
				  "type": "string",
				  "enum": [
					"text/turtle",
					"application/ld+json",
					"application/rdf+xml"
				  ]
				},
				"example": "text/turtle"
			  }
			]
		  }
		}
	  },
	  "/collection/{collection_id}/current/{acc_dep_or_concept}/": {
		"get": {
		  "tags": [
			"Collections"
		  ],
		  "summary": "Retrieve based on a collection ID and status",
		  "description": "Retrieve details of a particular collection",
		  "openapi_extra": {
			"parameters": [
			  {
				"in": "path",
				"name": "collection_id",
				"description": "The collection ID for the desired collection.",
				"required": "True",
				"example": "C30"
			  },
			  {
				"in": "path",
				"name": "acc_dep_or_concept",
				"description": "This option can either be the status of the collection, or a concept ID.\n\nThe available options for the status are 'accepted', 'deprecated', or 'all'.",
				"required": "False",
				"example": "accepted"
			  },
			  {
				"in": "query",
				"name": "_mediatype",
				"description": "Select the media type for the collection that is being retrieved.",
				"required": false,
				"schema": {
				  "type": "string",
				  "enum": [
					"text/turtle",
					"application/ld+json",
					"application/rdf+xml"
				  ]
				},
				"example": "text/turtle"
			  },
			  {
				"in": "query",
				"name": "_profile",
				"description": "Select the profile to use when making the request.",
				"schema": {
				  "type": "string",
				  "enum": [
					"void",
					"nvs",
					"skos",
					"dd",
					"vocpub",
					"dcat",
					"sdo"
				  ]
				},
				"required": false,
				"example": "nvs"
			  }
			]
		  }
		}
	  },
	  "/collection/{collection_id}/current/{concept_id}/{vnum}/": {
		"get": {
		  "tags": [
			"Collections"
		  ],
		  "summary": "Retrieve based on Collection & Concept ID, and version number.",
		  "description": "Retrieve details of a particular collection, with the added functionality of choosing a concept ID and a version number.",
		  "openapi_extra": {
			"parameters": [
			  {
				"in": "path",
				"name": "collection_id",
				"description": "Insert the collection ID here. For a full list of collection ID's, use the /collection/ endpoint.",
				"required": true,
				"example": "L22"
			  },
			  {
				"in": "path",
				"name": "concept_id",
				"description": "Insert the Concept ID here. For a full list of concepts, view a vocabulary and then refer to the ID column. When viewing the concept, the available versions will also be visible.",
				"required": true,
				"example": "TOOL1422"
			  },
			  {
				"in": "path",
				"name": "vnum",
				"description": "Insert the desired version number for the concept.",
				"required": false,
				"example": "1"
			  },
			  {
				"in": "query",
				"name": "_profile",
				"description": "Select the profile to use when making the request.",
				"schema": {
				  "type": "string",
				  "enum": [
					"void",
					"nvs",
					"skos",
					"dd",
					"vocpub",
					"dcat",
					"sdo"
				  ]
				},
				"required": false,
				"example": "nvs"
			  },
			  {
				"in": "query",
				"name": "_mediatype",
				"description": "Select the media type for the collection that is being retrieved.",
				"required": false,
				"schema": {
				  "type": "string",
				  "enum": [
					"text/turtle",
					"application/ld+json",
					"application/rdf+xml"
				  ]
				},
				"example": "text/turtle"
			  }
			]
		  }
		}
	  },
	  "/scheme/": {
		"get": {
		  "tags": [
			"Schemes"
		  ],
		  "summary": "Retrieve all schemes",
		  "description": "This endpoint will return all the schemes showing their ID, Title, Version, Version Date, Description, Governance and an External Link.",
		  "openapi_extra": {
			"parameters": [
			  {
				"in": "query",
				"name": "_mediatype",
				"description": "Select the media type to view the schemes page.",
				"required": false,
				"schema": {
				  "type": "string",
				  "enum": [
					"text/turtle",
					"application/ld+json",
					"application/rdf+xml"
				  ]
				},
				"example": "text/turtle"
			  },
			  {
				"in": "query",
				"name": "_profile",
				"description": "Select the profile to use when making the request.",
				"schema": {
				  "type": "string",
				  "enum": [
					"void",
					"nvs",
					"skos",
					"dd",
					"vocpub",
					"dcat",
					"sdo"
				  ]
				},
				"required": false,
				"example": "nvs"
			  }
			]
		  }
		}
	  },
	  "/scheme/{scheme_id}/current/": {
		"get": {
		  "tags": [
			"Schemes"
		  ],
		  "summary": "Retrieve based on a scheme ID",
		  "description": "A concept scheme is an aggregation of one or more SKOS concepts. Semantic links between these concepts can also be viewed as part of the concept scheme.",
		  "openapi_extra": {
			"parameters": [
			  {
				"in": "path",
				"name": "scheme_id",
				"description": "Pass in the scheme ID here. A full list can be viewed at the /scheme/ endpoint.",
				"required": true,
				"example": "SDNDDEV"
			  },
			  {
				"in": "query",
				"name": "_mediatype",
				"description": "Select the media type to view the schemes page.",
				"required": false,
				"schema": {
				  "type": "string",
				  "enum": [
					"text/turtle",
					"application/ld+json",
					"application/rdf+xml"
				  ]
				},
				"example": "text/turtle"
			  },
			  {
				"in": "query",
				"name": "_profile",
				"description": "Select the profile to use when making the request.",
				"schema": {
				  "type": "string",
				  "enum": [
					"void",
					"nvs",
					"skos",
					"dd",
					"vocpub",
					"dcat",
					"sdo"
				  ]
				},
				"required": false,
				"example": "nvs"
			  }
			]
		  }
		}
	  },
	  "/scheme/{scheme_id}/current/{acc_dep}/": {
		"get": {
		  "tags": [
			"Schemes"
		  ],
		  "summary": "Retrieve a scheme based on scheme ID and its apprecated/deprecated status",
		  "description": "This endpoint is the same as the /scheme{scheme_id}/ endpoint, but gives the option to pass in an additional status. ",
		  "openapi_extra": {
			"parameters": [
			  {
				"in": "path",
				"name": "scheme_id",
				"description": "This is the ID for the desired scheme",
				"required": true
			  },
			  {
				"in": "path",
				"name": "acc_dep",
				"description": "Given a scheme_id, this parameter allows for a status of the scheme to also be passed in.",
				"required": false,
				"schema": {
				  "title": "acc_dep",
				  "type": "status of the desired collection.",
				  "enum": [
					"accepted",
					"deprecated",
					"all"
				  ]
				},
				"example": "accepted"
			  },
			  {
				"in": "query",
				"name": "_mediatype",
				"description": "Select the media type to view the schemes page.",
				"required": false,
				"schema": {
				  "type": "string",
				  "enum": [
					"text/turtle",
					"application/ld+json",
					"application/rdf+xml"
				  ]
				},
				"example": "text/turtle"
			  },
			  {
				"in": "query",
				"name": "_profile",
				"description": "Select the profile to use when making the request.",
				"schema": {
				  "type": "string",
				  "enum": [
					"void",
					"nvs",
					"skos",
					"dd",
					"vocpub",
					"dcat",
					"sdo"
				  ]
				},
				"required": false,
				"example": "nvs"
			  }
			]
		  }
		}
	  },
	  "/mapping/{int_ext}/{mapping_id}/": {
		"get": {
		  "tags": [
			"Mappings"
		  ],
		  "summary": "Retrieve a mapping",
		  "description": "Retrieves a mapping for a concept.\n\n Use the following query at the SPARQL endpoint to discover mapping URLs for a concept.\n\n­­select * where {?s <http://www.w3.org/1999/02/22-rdf-syntax-ns#subject> <http://vocab.nerc.ac.uk/collection/A05/current/EV_AIRHUM/> .}",
		  "openapi_extra": {
			"parameters": [
			  {
				"in": "path",
				"name": "int_ext",
				"description": "Select 'I' for Internal, and 'E' for External.",
				"schema": {
				  "type": "string",
				  "enum": [
					"I",
					"E"
				  ]
				},
				"required": true,
				"example": "I"
			  },
			  {
				"in": "path",
				"name": "mapping_id",
				"description": "Specify the mapping ID for the desired concept.",
				"required": true,
				"example": "2"
			  },
			  {
				"in": "query",
				"name": "_mediatype",
				"description": "Select the media type to view the schemes page.",
				"required": false,
				"schema": {
				  "type": "string",
				  "enum": [
					"text/turtle",
					"application/ld+json",
					"application/rdf+xml"
				  ]
				},
				"example": "text/turtle"
			  },
			  {
				"in": "query",
				"name": "_profile",
				"description": "Select the profile to use when making the request.",
				"schema": {
				  "type": "string",
				  "enum": [
					"void",
					"nvs",
					"skos",
					"dd",
					"vocpub",
					"dcat",
					"sdo"
				  ]
				},
				"required": false,
				"example": "nvs"
			  }
			]
		  }
		}
	  },
	  "/about/": {
		"get": {
		  "summary": "About page",
		  "description": "Use this endpoint to view licencing and contact information"
		}
	  },
	  "/contact/": {
		"get": {
		  "summary": "Contact Page",
		  "description": "Use this endpoint to retrieve the E-mail, phone number and address for BODC."
		}
	  },
	  "/sparql/": {
		"post": {
		  "tags": [
			"SPARQL"
		  ],
		  "summary": "Run a SPARQL query",
		  "description": "To run a SPARQL query interactively, do not enter query here, instead visit: 'https://www.vocab.nerc.ac.uk/sparql'."
		},
		"get": {
		  "tags": [
			"SPARQL"
		  ],
		  "summary": "Run a SPARQL query",
		  "description": "To run a SPARQL query interactively, visit: 'https://www.vocab.nerc.ac.uk/sparql'."
		}
	  },
	  "/standard_name/{concept_id}/": {
		"get": {
		  "tags": [
			"Standard Names"
		  ],
		  "summary": "Climate and Forecast standard names",
		  "description": "Descriptions of measured phenomena in the CF conventions (a content standard for data stored in NetCDF).\n\nUse the /standard_name/ endpoint to get the full list of concepts.",
		  "openapi_extra": {
			"parameters": [
			  {
				"in": "path",
				"name": "concept_id",
				"description": "The ID for the desired concept is the prefLabel of the P07 collection listed in the above endpoint **/collection/{collection_id}/current/** where collection_id = P07.",
				"required": true,
				"example": "aerodynamic_resistance"
			  },
			  {
				"in": "query",
				"name": "_mediatype",
				"description": "Select the media type for the collection that is being retrieved.",
				"required": false,
				"schema": {
				  "type": "string",
				  "enum": [
					"text/turtle",
					"application/ld+json",
					"application/rdf+xml"
				  ]
				},
				"example": "text/turtle"
			  },
			  {
				"in": "query",
				"name": "_profile",
				"description": "Select the profile to use when making the request.",
				"schema": {
				  "type": "string",
				  "enum": [
					"void",
					"nvs",
					"skos",
					"dd",
					"vocpub",
					"dcat",
					"sdo"
				  ]
				},
				"required": false,
				"example": "nvs"
			  }
			]
		  }
		}
	  }
	}
  }